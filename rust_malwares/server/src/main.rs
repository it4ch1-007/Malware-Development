
 //this package is used to import asynchronous functions

use tokio::net::TcpListener;
use std::io::Write;




async fn input(title:String)-> Option<String>{
    let mut stdout= std::io::stdout();
    let mut user_data: String = "".to_string();
    stdout.write_all(title.as_bytes()).unwrap();
    stdout.flush().unwrap();
    std::io::stdin().read_line(&mut user_data).unwrap();

    if(user_data.len()>0){
        Some(user_data) //some keyword is used to return an option
    }
    else
    {
        None
    }

}

async fn user_interaction()
{
    loop{
        match input(title: "Command: ".to_string()).await{
            Some(cmd: String) =>{

            }
            None =>{

            }
        }
    }
}

#[tokio::main]
async fn main() {
    let addr: &str = "127.0.0.1:8080";
    let socket: TcpListener = TcpListener::bind(addr).await.unwrap();
    let mut clients: Vec<TcpStream> = vec![];
    std::thread::spawn(|| user_interaction); //this is to create a thread from a given specific function
    //the closure keyword '||' specifies that the code will be run in the new thread concurrently
    

}
